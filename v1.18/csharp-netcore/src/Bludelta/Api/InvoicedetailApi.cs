/*
 * Blumatix.Capture.Webservice.Client.Selfhosted
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.9
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Bludelta.Client;
using Bludelta.Model;

namespace Bludelta.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInvoicedetailApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Extracts invoice features of a provided invoice.
        /// </summary>
        /// <remarks>
        /// Extracts invoice features of a provided invoice.
        /// </remarks>
        /// <exception cref="Bludelta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="filter">Filter for Invoice details that shall be predicted&lt;br&gt;flag &#39;None&#39; will return all available Invoice details for your subscription,&lt;br&gt;else define the filter by providing a bitmask for the Invoice details that shall be predicted.&lt;br&gt;e.g. Filter &#x3D; GrandTotalAmount | Ibans.&lt;br&gt;&lt;br&gt;Filters:&lt;br&gt;&lt;ul&gt;&lt;li&gt;None:                      0&lt;/li&gt;&lt;li&gt;DeliveryDate:              8&lt;/li&gt;&lt;li&gt;GrandTotalAmount:         16&lt;/li&gt;&lt;li&gt;InvoiceDate:              64&lt;/li&gt;&lt;li&gt;InvoiceId:              1024&lt;/li&gt;&lt;li&gt;DocumentType:           8192&lt;/li&gt;&lt;li&gt;Ibans:                 16384&lt;/li&gt;&lt;li&gt;InvoiceCurrency:      524288&lt;/li&gt;&lt;li&gt;CustomerId:          2097152&lt;/li&gt;&lt;li&gt;UstIds:              8388608&lt;/li&gt;&lt;li&gt;SenderOrderId:      16777216&lt;/li&gt;&lt;li&gt;ReceiverOrderId:    33554432&lt;/li&gt;&lt;li&gt;SenderOrderDate:    67108864&lt;/li&gt;&lt;li&gt;ReceiverOrderDate: 134217728&lt;/li&gt;&lt;li&gt;VatGroup:          536870912&lt;/li&gt;&lt;/ul&gt; (optional)</param>
        /// <param name="invoice">Invoice (encoded as base64 string) - accepted formats: PDF, JPG, PNG, GIF, TIFF (optional)</param>
        /// <param name="format">Special Invoice format.&lt;br&gt;for future use only&lt;ul&gt;&lt;li&gt;None: 0&lt;/li&gt;&lt;li&gt;EbInterface: 1&lt;/li&gt;&lt;/ul&gt; (optional)</param>
        /// <param name="createResultPdf">If this flag is set, the response will contain the sent invoice as pdf-document with marked predictions. (optional)</param>
        /// <param name="addOcrResult">If this flag is set, the response will contain the OCR-Result as json string. (optional)</param>
        /// <param name="addOcrPageImages">If this flag is set, the response will contain the images of the OCR-Result pages as list of Base64 encoded strings. (optional)</param>
        /// <param name="addDocumentText">If this flag is set, the response will contain the plain text of the document as detected by the OCR. (optional)</param>
        /// <param name="languages">Restrict invoice languages to a given set provided as a comma separates string of languages. (optional)</param>
        /// <returns>DetectInvoiceResponse</returns>
        DetectInvoiceResponse DetectInvoiceRequestdetectPost(string accept, long? filter = default(long?), string invoice = default(string), int? format = default(int?), bool? createResultPdf = default(bool?), bool? addOcrResult = default(bool?), bool? addOcrPageImages = default(bool?), bool? addDocumentText = default(bool?), string languages = default(string));

        /// <summary>
        /// Extracts invoice features of a provided invoice.
        /// </summary>
        /// <remarks>
        /// Extracts invoice features of a provided invoice.
        /// </remarks>
        /// <exception cref="Bludelta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="filter">Filter for Invoice details that shall be predicted&lt;br&gt;flag &#39;None&#39; will return all available Invoice details for your subscription,&lt;br&gt;else define the filter by providing a bitmask for the Invoice details that shall be predicted.&lt;br&gt;e.g. Filter &#x3D; GrandTotalAmount | Ibans.&lt;br&gt;&lt;br&gt;Filters:&lt;br&gt;&lt;ul&gt;&lt;li&gt;None:                      0&lt;/li&gt;&lt;li&gt;DeliveryDate:              8&lt;/li&gt;&lt;li&gt;GrandTotalAmount:         16&lt;/li&gt;&lt;li&gt;InvoiceDate:              64&lt;/li&gt;&lt;li&gt;InvoiceId:              1024&lt;/li&gt;&lt;li&gt;DocumentType:           8192&lt;/li&gt;&lt;li&gt;Ibans:                 16384&lt;/li&gt;&lt;li&gt;InvoiceCurrency:      524288&lt;/li&gt;&lt;li&gt;CustomerId:          2097152&lt;/li&gt;&lt;li&gt;UstIds:              8388608&lt;/li&gt;&lt;li&gt;SenderOrderId:      16777216&lt;/li&gt;&lt;li&gt;ReceiverOrderId:    33554432&lt;/li&gt;&lt;li&gt;SenderOrderDate:    67108864&lt;/li&gt;&lt;li&gt;ReceiverOrderDate: 134217728&lt;/li&gt;&lt;li&gt;VatGroup:          536870912&lt;/li&gt;&lt;/ul&gt; (optional)</param>
        /// <param name="invoice">Invoice (encoded as base64 string) - accepted formats: PDF, JPG, PNG, GIF, TIFF (optional)</param>
        /// <param name="format">Special Invoice format.&lt;br&gt;for future use only&lt;ul&gt;&lt;li&gt;None: 0&lt;/li&gt;&lt;li&gt;EbInterface: 1&lt;/li&gt;&lt;/ul&gt; (optional)</param>
        /// <param name="createResultPdf">If this flag is set, the response will contain the sent invoice as pdf-document with marked predictions. (optional)</param>
        /// <param name="addOcrResult">If this flag is set, the response will contain the OCR-Result as json string. (optional)</param>
        /// <param name="addOcrPageImages">If this flag is set, the response will contain the images of the OCR-Result pages as list of Base64 encoded strings. (optional)</param>
        /// <param name="addDocumentText">If this flag is set, the response will contain the plain text of the document as detected by the OCR. (optional)</param>
        /// <param name="languages">Restrict invoice languages to a given set provided as a comma separates string of languages. (optional)</param>
        /// <returns>ApiResponse of DetectInvoiceResponse</returns>
        ApiResponse<DetectInvoiceResponse> DetectInvoiceRequestdetectPostWithHttpInfo(string accept, long? filter = default(long?), string invoice = default(string), int? format = default(int?), bool? createResultPdf = default(bool?), bool? addOcrResult = default(bool?), bool? addOcrPageImages = default(bool?), bool? addDocumentText = default(bool?), string languages = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInvoicedetailApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Extracts invoice features of a provided invoice.
        /// </summary>
        /// <remarks>
        /// Extracts invoice features of a provided invoice.
        /// </remarks>
        /// <exception cref="Bludelta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="filter">Filter for Invoice details that shall be predicted&lt;br&gt;flag &#39;None&#39; will return all available Invoice details for your subscription,&lt;br&gt;else define the filter by providing a bitmask for the Invoice details that shall be predicted.&lt;br&gt;e.g. Filter &#x3D; GrandTotalAmount | Ibans.&lt;br&gt;&lt;br&gt;Filters:&lt;br&gt;&lt;ul&gt;&lt;li&gt;None:                      0&lt;/li&gt;&lt;li&gt;DeliveryDate:              8&lt;/li&gt;&lt;li&gt;GrandTotalAmount:         16&lt;/li&gt;&lt;li&gt;InvoiceDate:              64&lt;/li&gt;&lt;li&gt;InvoiceId:              1024&lt;/li&gt;&lt;li&gt;DocumentType:           8192&lt;/li&gt;&lt;li&gt;Ibans:                 16384&lt;/li&gt;&lt;li&gt;InvoiceCurrency:      524288&lt;/li&gt;&lt;li&gt;CustomerId:          2097152&lt;/li&gt;&lt;li&gt;UstIds:              8388608&lt;/li&gt;&lt;li&gt;SenderOrderId:      16777216&lt;/li&gt;&lt;li&gt;ReceiverOrderId:    33554432&lt;/li&gt;&lt;li&gt;SenderOrderDate:    67108864&lt;/li&gt;&lt;li&gt;ReceiverOrderDate: 134217728&lt;/li&gt;&lt;li&gt;VatGroup:          536870912&lt;/li&gt;&lt;/ul&gt; (optional)</param>
        /// <param name="invoice">Invoice (encoded as base64 string) - accepted formats: PDF, JPG, PNG, GIF, TIFF (optional)</param>
        /// <param name="format">Special Invoice format.&lt;br&gt;for future use only&lt;ul&gt;&lt;li&gt;None: 0&lt;/li&gt;&lt;li&gt;EbInterface: 1&lt;/li&gt;&lt;/ul&gt; (optional)</param>
        /// <param name="createResultPdf">If this flag is set, the response will contain the sent invoice as pdf-document with marked predictions. (optional)</param>
        /// <param name="addOcrResult">If this flag is set, the response will contain the OCR-Result as json string. (optional)</param>
        /// <param name="addOcrPageImages">If this flag is set, the response will contain the images of the OCR-Result pages as list of Base64 encoded strings. (optional)</param>
        /// <param name="addDocumentText">If this flag is set, the response will contain the plain text of the document as detected by the OCR. (optional)</param>
        /// <param name="languages">Restrict invoice languages to a given set provided as a comma separates string of languages. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DetectInvoiceResponse</returns>
        System.Threading.Tasks.Task<DetectInvoiceResponse> DetectInvoiceRequestdetectPostAsync(string accept, long? filter = default(long?), string invoice = default(string), int? format = default(int?), bool? createResultPdf = default(bool?), bool? addOcrResult = default(bool?), bool? addOcrPageImages = default(bool?), bool? addDocumentText = default(bool?), string languages = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Extracts invoice features of a provided invoice.
        /// </summary>
        /// <remarks>
        /// Extracts invoice features of a provided invoice.
        /// </remarks>
        /// <exception cref="Bludelta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="filter">Filter for Invoice details that shall be predicted&lt;br&gt;flag &#39;None&#39; will return all available Invoice details for your subscription,&lt;br&gt;else define the filter by providing a bitmask for the Invoice details that shall be predicted.&lt;br&gt;e.g. Filter &#x3D; GrandTotalAmount | Ibans.&lt;br&gt;&lt;br&gt;Filters:&lt;br&gt;&lt;ul&gt;&lt;li&gt;None:                      0&lt;/li&gt;&lt;li&gt;DeliveryDate:              8&lt;/li&gt;&lt;li&gt;GrandTotalAmount:         16&lt;/li&gt;&lt;li&gt;InvoiceDate:              64&lt;/li&gt;&lt;li&gt;InvoiceId:              1024&lt;/li&gt;&lt;li&gt;DocumentType:           8192&lt;/li&gt;&lt;li&gt;Ibans:                 16384&lt;/li&gt;&lt;li&gt;InvoiceCurrency:      524288&lt;/li&gt;&lt;li&gt;CustomerId:          2097152&lt;/li&gt;&lt;li&gt;UstIds:              8388608&lt;/li&gt;&lt;li&gt;SenderOrderId:      16777216&lt;/li&gt;&lt;li&gt;ReceiverOrderId:    33554432&lt;/li&gt;&lt;li&gt;SenderOrderDate:    67108864&lt;/li&gt;&lt;li&gt;ReceiverOrderDate: 134217728&lt;/li&gt;&lt;li&gt;VatGroup:          536870912&lt;/li&gt;&lt;/ul&gt; (optional)</param>
        /// <param name="invoice">Invoice (encoded as base64 string) - accepted formats: PDF, JPG, PNG, GIF, TIFF (optional)</param>
        /// <param name="format">Special Invoice format.&lt;br&gt;for future use only&lt;ul&gt;&lt;li&gt;None: 0&lt;/li&gt;&lt;li&gt;EbInterface: 1&lt;/li&gt;&lt;/ul&gt; (optional)</param>
        /// <param name="createResultPdf">If this flag is set, the response will contain the sent invoice as pdf-document with marked predictions. (optional)</param>
        /// <param name="addOcrResult">If this flag is set, the response will contain the OCR-Result as json string. (optional)</param>
        /// <param name="addOcrPageImages">If this flag is set, the response will contain the images of the OCR-Result pages as list of Base64 encoded strings. (optional)</param>
        /// <param name="addDocumentText">If this flag is set, the response will contain the plain text of the document as detected by the OCR. (optional)</param>
        /// <param name="languages">Restrict invoice languages to a given set provided as a comma separates string of languages. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DetectInvoiceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DetectInvoiceResponse>> DetectInvoiceRequestdetectPostWithHttpInfoAsync(string accept, long? filter = default(long?), string invoice = default(string), int? format = default(int?), bool? createResultPdf = default(bool?), bool? addOcrResult = default(bool?), bool? addOcrPageImages = default(bool?), bool? addDocumentText = default(bool?), string languages = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInvoicedetailApi : IInvoicedetailApiSync, IInvoicedetailApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InvoicedetailApi : IInvoicedetailApi
    {
        private Bludelta.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InvoicedetailApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InvoicedetailApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvoicedetailApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InvoicedetailApi(string basePath)
        {
            this.Configuration = Bludelta.Client.Configuration.MergeConfigurations(
                Bludelta.Client.GlobalConfiguration.Instance,
                new Bludelta.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Bludelta.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Bludelta.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Bludelta.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvoicedetailApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InvoicedetailApi(Bludelta.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Bludelta.Client.Configuration.MergeConfigurations(
                Bludelta.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Bludelta.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Bludelta.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Bludelta.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvoicedetailApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public InvoicedetailApi(Bludelta.Client.ISynchronousClient client, Bludelta.Client.IAsynchronousClient asyncClient, Bludelta.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Bludelta.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Bludelta.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Bludelta.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Bludelta.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Bludelta.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Extracts invoice features of a provided invoice. Extracts invoice features of a provided invoice.
        /// </summary>
        /// <exception cref="Bludelta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="filter">Filter for Invoice details that shall be predicted&lt;br&gt;flag &#39;None&#39; will return all available Invoice details for your subscription,&lt;br&gt;else define the filter by providing a bitmask for the Invoice details that shall be predicted.&lt;br&gt;e.g. Filter &#x3D; GrandTotalAmount | Ibans.&lt;br&gt;&lt;br&gt;Filters:&lt;br&gt;&lt;ul&gt;&lt;li&gt;None:                      0&lt;/li&gt;&lt;li&gt;DeliveryDate:              8&lt;/li&gt;&lt;li&gt;GrandTotalAmount:         16&lt;/li&gt;&lt;li&gt;InvoiceDate:              64&lt;/li&gt;&lt;li&gt;InvoiceId:              1024&lt;/li&gt;&lt;li&gt;DocumentType:           8192&lt;/li&gt;&lt;li&gt;Ibans:                 16384&lt;/li&gt;&lt;li&gt;InvoiceCurrency:      524288&lt;/li&gt;&lt;li&gt;CustomerId:          2097152&lt;/li&gt;&lt;li&gt;UstIds:              8388608&lt;/li&gt;&lt;li&gt;SenderOrderId:      16777216&lt;/li&gt;&lt;li&gt;ReceiverOrderId:    33554432&lt;/li&gt;&lt;li&gt;SenderOrderDate:    67108864&lt;/li&gt;&lt;li&gt;ReceiverOrderDate: 134217728&lt;/li&gt;&lt;li&gt;VatGroup:          536870912&lt;/li&gt;&lt;/ul&gt; (optional)</param>
        /// <param name="invoice">Invoice (encoded as base64 string) - accepted formats: PDF, JPG, PNG, GIF, TIFF (optional)</param>
        /// <param name="format">Special Invoice format.&lt;br&gt;for future use only&lt;ul&gt;&lt;li&gt;None: 0&lt;/li&gt;&lt;li&gt;EbInterface: 1&lt;/li&gt;&lt;/ul&gt; (optional)</param>
        /// <param name="createResultPdf">If this flag is set, the response will contain the sent invoice as pdf-document with marked predictions. (optional)</param>
        /// <param name="addOcrResult">If this flag is set, the response will contain the OCR-Result as json string. (optional)</param>
        /// <param name="addOcrPageImages">If this flag is set, the response will contain the images of the OCR-Result pages as list of Base64 encoded strings. (optional)</param>
        /// <param name="addDocumentText">If this flag is set, the response will contain the plain text of the document as detected by the OCR. (optional)</param>
        /// <param name="languages">Restrict invoice languages to a given set provided as a comma separates string of languages. (optional)</param>
        /// <returns>DetectInvoiceResponse</returns>
        public DetectInvoiceResponse DetectInvoiceRequestdetectPost(string accept, long? filter = default(long?), string invoice = default(string), int? format = default(int?), bool? createResultPdf = default(bool?), bool? addOcrResult = default(bool?), bool? addOcrPageImages = default(bool?), bool? addDocumentText = default(bool?), string languages = default(string))
        {
            Bludelta.Client.ApiResponse<DetectInvoiceResponse> localVarResponse = DetectInvoiceRequestdetectPostWithHttpInfo(accept, filter, invoice, format, createResultPdf, addOcrResult, addOcrPageImages, addDocumentText, languages);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Extracts invoice features of a provided invoice. Extracts invoice features of a provided invoice.
        /// </summary>
        /// <exception cref="Bludelta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="filter">Filter for Invoice details that shall be predicted&lt;br&gt;flag &#39;None&#39; will return all available Invoice details for your subscription,&lt;br&gt;else define the filter by providing a bitmask for the Invoice details that shall be predicted.&lt;br&gt;e.g. Filter &#x3D; GrandTotalAmount | Ibans.&lt;br&gt;&lt;br&gt;Filters:&lt;br&gt;&lt;ul&gt;&lt;li&gt;None:                      0&lt;/li&gt;&lt;li&gt;DeliveryDate:              8&lt;/li&gt;&lt;li&gt;GrandTotalAmount:         16&lt;/li&gt;&lt;li&gt;InvoiceDate:              64&lt;/li&gt;&lt;li&gt;InvoiceId:              1024&lt;/li&gt;&lt;li&gt;DocumentType:           8192&lt;/li&gt;&lt;li&gt;Ibans:                 16384&lt;/li&gt;&lt;li&gt;InvoiceCurrency:      524288&lt;/li&gt;&lt;li&gt;CustomerId:          2097152&lt;/li&gt;&lt;li&gt;UstIds:              8388608&lt;/li&gt;&lt;li&gt;SenderOrderId:      16777216&lt;/li&gt;&lt;li&gt;ReceiverOrderId:    33554432&lt;/li&gt;&lt;li&gt;SenderOrderDate:    67108864&lt;/li&gt;&lt;li&gt;ReceiverOrderDate: 134217728&lt;/li&gt;&lt;li&gt;VatGroup:          536870912&lt;/li&gt;&lt;/ul&gt; (optional)</param>
        /// <param name="invoice">Invoice (encoded as base64 string) - accepted formats: PDF, JPG, PNG, GIF, TIFF (optional)</param>
        /// <param name="format">Special Invoice format.&lt;br&gt;for future use only&lt;ul&gt;&lt;li&gt;None: 0&lt;/li&gt;&lt;li&gt;EbInterface: 1&lt;/li&gt;&lt;/ul&gt; (optional)</param>
        /// <param name="createResultPdf">If this flag is set, the response will contain the sent invoice as pdf-document with marked predictions. (optional)</param>
        /// <param name="addOcrResult">If this flag is set, the response will contain the OCR-Result as json string. (optional)</param>
        /// <param name="addOcrPageImages">If this flag is set, the response will contain the images of the OCR-Result pages as list of Base64 encoded strings. (optional)</param>
        /// <param name="addDocumentText">If this flag is set, the response will contain the plain text of the document as detected by the OCR. (optional)</param>
        /// <param name="languages">Restrict invoice languages to a given set provided as a comma separates string of languages. (optional)</param>
        /// <returns>ApiResponse of DetectInvoiceResponse</returns>
        public Bludelta.Client.ApiResponse<DetectInvoiceResponse> DetectInvoiceRequestdetectPostWithHttpInfo(string accept, long? filter = default(long?), string invoice = default(string), int? format = default(int?), bool? createResultPdf = default(bool?), bool? addOcrResult = default(bool?), bool? addOcrPageImages = default(bool?), bool? addDocumentText = default(bool?), string languages = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Bludelta.Client.ApiException(400, "Missing required parameter 'accept' when calling InvoicedetailApi->DetectInvoiceRequestdetectPost");

            Bludelta.Client.RequestOptions localVarRequestOptions = new Bludelta.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bludelta.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bludelta.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Bludelta.Client.ClientUtils.ParameterToString(accept)); // header parameter
            if (filter != null)
            {
                localVarRequestOptions.FormParameters.Add("Filter", Bludelta.Client.ClientUtils.ParameterToString(filter)); // form parameter
            }
            if (invoice != null)
            {
                localVarRequestOptions.FormParameters.Add("Invoice", Bludelta.Client.ClientUtils.ParameterToString(invoice)); // form parameter
            }
            if (format != null)
            {
                localVarRequestOptions.FormParameters.Add("Format", Bludelta.Client.ClientUtils.ParameterToString(format)); // form parameter
            }
            if (createResultPdf != null)
            {
                localVarRequestOptions.FormParameters.Add("CreateResultPdf", Bludelta.Client.ClientUtils.ParameterToString(createResultPdf)); // form parameter
            }
            if (addOcrResult != null)
            {
                localVarRequestOptions.FormParameters.Add("AddOcrResult", Bludelta.Client.ClientUtils.ParameterToString(addOcrResult)); // form parameter
            }
            if (addOcrPageImages != null)
            {
                localVarRequestOptions.FormParameters.Add("AddOcrPageImages", Bludelta.Client.ClientUtils.ParameterToString(addOcrPageImages)); // form parameter
            }
            if (addDocumentText != null)
            {
                localVarRequestOptions.FormParameters.Add("AddDocumentText", Bludelta.Client.ClientUtils.ParameterToString(addDocumentText)); // form parameter
            }
            if (languages != null)
            {
                localVarRequestOptions.FormParameters.Add("Languages", Bludelta.Client.ClientUtils.ParameterToString(languages)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post<DetectInvoiceResponse>("/invoicedetail/detect", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DetectInvoiceRequestdetectPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Extracts invoice features of a provided invoice. Extracts invoice features of a provided invoice.
        /// </summary>
        /// <exception cref="Bludelta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="filter">Filter for Invoice details that shall be predicted&lt;br&gt;flag &#39;None&#39; will return all available Invoice details for your subscription,&lt;br&gt;else define the filter by providing a bitmask for the Invoice details that shall be predicted.&lt;br&gt;e.g. Filter &#x3D; GrandTotalAmount | Ibans.&lt;br&gt;&lt;br&gt;Filters:&lt;br&gt;&lt;ul&gt;&lt;li&gt;None:                      0&lt;/li&gt;&lt;li&gt;DeliveryDate:              8&lt;/li&gt;&lt;li&gt;GrandTotalAmount:         16&lt;/li&gt;&lt;li&gt;InvoiceDate:              64&lt;/li&gt;&lt;li&gt;InvoiceId:              1024&lt;/li&gt;&lt;li&gt;DocumentType:           8192&lt;/li&gt;&lt;li&gt;Ibans:                 16384&lt;/li&gt;&lt;li&gt;InvoiceCurrency:      524288&lt;/li&gt;&lt;li&gt;CustomerId:          2097152&lt;/li&gt;&lt;li&gt;UstIds:              8388608&lt;/li&gt;&lt;li&gt;SenderOrderId:      16777216&lt;/li&gt;&lt;li&gt;ReceiverOrderId:    33554432&lt;/li&gt;&lt;li&gt;SenderOrderDate:    67108864&lt;/li&gt;&lt;li&gt;ReceiverOrderDate: 134217728&lt;/li&gt;&lt;li&gt;VatGroup:          536870912&lt;/li&gt;&lt;/ul&gt; (optional)</param>
        /// <param name="invoice">Invoice (encoded as base64 string) - accepted formats: PDF, JPG, PNG, GIF, TIFF (optional)</param>
        /// <param name="format">Special Invoice format.&lt;br&gt;for future use only&lt;ul&gt;&lt;li&gt;None: 0&lt;/li&gt;&lt;li&gt;EbInterface: 1&lt;/li&gt;&lt;/ul&gt; (optional)</param>
        /// <param name="createResultPdf">If this flag is set, the response will contain the sent invoice as pdf-document with marked predictions. (optional)</param>
        /// <param name="addOcrResult">If this flag is set, the response will contain the OCR-Result as json string. (optional)</param>
        /// <param name="addOcrPageImages">If this flag is set, the response will contain the images of the OCR-Result pages as list of Base64 encoded strings. (optional)</param>
        /// <param name="addDocumentText">If this flag is set, the response will contain the plain text of the document as detected by the OCR. (optional)</param>
        /// <param name="languages">Restrict invoice languages to a given set provided as a comma separates string of languages. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DetectInvoiceResponse</returns>
        public async System.Threading.Tasks.Task<DetectInvoiceResponse> DetectInvoiceRequestdetectPostAsync(string accept, long? filter = default(long?), string invoice = default(string), int? format = default(int?), bool? createResultPdf = default(bool?), bool? addOcrResult = default(bool?), bool? addOcrPageImages = default(bool?), bool? addDocumentText = default(bool?), string languages = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Bludelta.Client.ApiResponse<DetectInvoiceResponse> localVarResponse = await DetectInvoiceRequestdetectPostWithHttpInfoAsync(accept, filter, invoice, format, createResultPdf, addOcrResult, addOcrPageImages, addDocumentText, languages, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Extracts invoice features of a provided invoice. Extracts invoice features of a provided invoice.
        /// </summary>
        /// <exception cref="Bludelta.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="filter">Filter for Invoice details that shall be predicted&lt;br&gt;flag &#39;None&#39; will return all available Invoice details for your subscription,&lt;br&gt;else define the filter by providing a bitmask for the Invoice details that shall be predicted.&lt;br&gt;e.g. Filter &#x3D; GrandTotalAmount | Ibans.&lt;br&gt;&lt;br&gt;Filters:&lt;br&gt;&lt;ul&gt;&lt;li&gt;None:                      0&lt;/li&gt;&lt;li&gt;DeliveryDate:              8&lt;/li&gt;&lt;li&gt;GrandTotalAmount:         16&lt;/li&gt;&lt;li&gt;InvoiceDate:              64&lt;/li&gt;&lt;li&gt;InvoiceId:              1024&lt;/li&gt;&lt;li&gt;DocumentType:           8192&lt;/li&gt;&lt;li&gt;Ibans:                 16384&lt;/li&gt;&lt;li&gt;InvoiceCurrency:      524288&lt;/li&gt;&lt;li&gt;CustomerId:          2097152&lt;/li&gt;&lt;li&gt;UstIds:              8388608&lt;/li&gt;&lt;li&gt;SenderOrderId:      16777216&lt;/li&gt;&lt;li&gt;ReceiverOrderId:    33554432&lt;/li&gt;&lt;li&gt;SenderOrderDate:    67108864&lt;/li&gt;&lt;li&gt;ReceiverOrderDate: 134217728&lt;/li&gt;&lt;li&gt;VatGroup:          536870912&lt;/li&gt;&lt;/ul&gt; (optional)</param>
        /// <param name="invoice">Invoice (encoded as base64 string) - accepted formats: PDF, JPG, PNG, GIF, TIFF (optional)</param>
        /// <param name="format">Special Invoice format.&lt;br&gt;for future use only&lt;ul&gt;&lt;li&gt;None: 0&lt;/li&gt;&lt;li&gt;EbInterface: 1&lt;/li&gt;&lt;/ul&gt; (optional)</param>
        /// <param name="createResultPdf">If this flag is set, the response will contain the sent invoice as pdf-document with marked predictions. (optional)</param>
        /// <param name="addOcrResult">If this flag is set, the response will contain the OCR-Result as json string. (optional)</param>
        /// <param name="addOcrPageImages">If this flag is set, the response will contain the images of the OCR-Result pages as list of Base64 encoded strings. (optional)</param>
        /// <param name="addDocumentText">If this flag is set, the response will contain the plain text of the document as detected by the OCR. (optional)</param>
        /// <param name="languages">Restrict invoice languages to a given set provided as a comma separates string of languages. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DetectInvoiceResponse)</returns>
        public async System.Threading.Tasks.Task<Bludelta.Client.ApiResponse<DetectInvoiceResponse>> DetectInvoiceRequestdetectPostWithHttpInfoAsync(string accept, long? filter = default(long?), string invoice = default(string), int? format = default(int?), bool? createResultPdf = default(bool?), bool? addOcrResult = default(bool?), bool? addOcrPageImages = default(bool?), bool? addDocumentText = default(bool?), string languages = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Bludelta.Client.ApiException(400, "Missing required parameter 'accept' when calling InvoicedetailApi->DetectInvoiceRequestdetectPost");


            Bludelta.Client.RequestOptions localVarRequestOptions = new Bludelta.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bludelta.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bludelta.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Bludelta.Client.ClientUtils.ParameterToString(accept)); // header parameter
            if (filter != null)
            {
                localVarRequestOptions.FormParameters.Add("Filter", Bludelta.Client.ClientUtils.ParameterToString(filter)); // form parameter
            }
            if (invoice != null)
            {
                localVarRequestOptions.FormParameters.Add("Invoice", Bludelta.Client.ClientUtils.ParameterToString(invoice)); // form parameter
            }
            if (format != null)
            {
                localVarRequestOptions.FormParameters.Add("Format", Bludelta.Client.ClientUtils.ParameterToString(format)); // form parameter
            }
            if (createResultPdf != null)
            {
                localVarRequestOptions.FormParameters.Add("CreateResultPdf", Bludelta.Client.ClientUtils.ParameterToString(createResultPdf)); // form parameter
            }
            if (addOcrResult != null)
            {
                localVarRequestOptions.FormParameters.Add("AddOcrResult", Bludelta.Client.ClientUtils.ParameterToString(addOcrResult)); // form parameter
            }
            if (addOcrPageImages != null)
            {
                localVarRequestOptions.FormParameters.Add("AddOcrPageImages", Bludelta.Client.ClientUtils.ParameterToString(addOcrPageImages)); // form parameter
            }
            if (addDocumentText != null)
            {
                localVarRequestOptions.FormParameters.Add("AddDocumentText", Bludelta.Client.ClientUtils.ParameterToString(addDocumentText)); // form parameter
            }
            if (languages != null)
            {
                localVarRequestOptions.FormParameters.Add("Languages", Bludelta.Client.ClientUtils.ParameterToString(languages)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DetectInvoiceResponse>("/invoicedetail/detect", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DetectInvoiceRequestdetectPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
