/*
 * Blumatix.Capture.Webservice.Client.Selfhosted
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.9
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Bludelta.Client.OpenAPIDateConverter;

namespace Bludelta.Model
{
    /// <summary>
    /// LineItemResponse
    /// </summary>
    [DataContract(Name = "LineItemResponse")]
    public partial class LineItemResponse : IEquatable<LineItemResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LineItemResponse" /> class.
        /// </summary>
        /// <param name="itemId">itemId.</param>
        /// <param name="positionNumber">Position number of the line item.</param>
        /// <param name="description">description.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="unitPrice">unitPrice.</param>
        /// <param name="totalAmount">totalAmount.</param>
        /// <param name="orderId">orderId.</param>
        /// <param name="deliveryId">deliveryId.</param>
        /// <param name="score">Scored probability. Value between zero and one..</param>
        /// <param name="x">X-Position according to the document resolution.</param>
        /// <param name="y">Y-Position according to the document resolution.</param>
        /// <param name="width">Width according to the document resolution.</param>
        /// <param name="height">Height according to the document resolution.</param>
        public LineItemResponse(DetailResponse itemId = default(DetailResponse), int positionNumber = default(int), DetailResponse description = default(DetailResponse), DetailResponse quantity = default(DetailResponse), DetailResponse unitPrice = default(DetailResponse), DetailResponse totalAmount = default(DetailResponse), DetailResponse orderId = default(DetailResponse), DetailResponse deliveryId = default(DetailResponse), double score = default(double), int x = default(int), int y = default(int), int width = default(int), int height = default(int))
        {
            this.ItemId = itemId;
            this.PositionNumber = positionNumber;
            this.Description = description;
            this.Quantity = quantity;
            this.UnitPrice = unitPrice;
            this.TotalAmount = totalAmount;
            this.OrderId = orderId;
            this.DeliveryId = deliveryId;
            this.Score = score;
            this.X = x;
            this.Y = y;
            this.Width = width;
            this.Height = height;
        }

        /// <summary>
        /// Gets or Sets ItemId
        /// </summary>
        [DataMember(Name = "ItemId", EmitDefaultValue = false)]
        public DetailResponse ItemId { get; set; }

        /// <summary>
        /// Position number of the line item
        /// </summary>
        /// <value>Position number of the line item</value>
        [DataMember(Name = "PositionNumber", EmitDefaultValue = false)]
        public int PositionNumber { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "Description", EmitDefaultValue = false)]
        public DetailResponse Description { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name = "Quantity", EmitDefaultValue = false)]
        public DetailResponse Quantity { get; set; }

        /// <summary>
        /// Gets or Sets UnitPrice
        /// </summary>
        [DataMember(Name = "UnitPrice", EmitDefaultValue = false)]
        public DetailResponse UnitPrice { get; set; }

        /// <summary>
        /// Gets or Sets TotalAmount
        /// </summary>
        [DataMember(Name = "TotalAmount", EmitDefaultValue = false)]
        public DetailResponse TotalAmount { get; set; }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name = "OrderId", EmitDefaultValue = false)]
        public DetailResponse OrderId { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryId
        /// </summary>
        [DataMember(Name = "DeliveryId", EmitDefaultValue = false)]
        public DetailResponse DeliveryId { get; set; }

        /// <summary>
        /// Scored probability. Value between zero and one.
        /// </summary>
        /// <value>Scored probability. Value between zero and one.</value>
        [DataMember(Name = "Score", EmitDefaultValue = false)]
        public double Score { get; set; }

        /// <summary>
        /// X-Position according to the document resolution
        /// </summary>
        /// <value>X-Position according to the document resolution</value>
        [DataMember(Name = "X", EmitDefaultValue = false)]
        public int X { get; set; }

        /// <summary>
        /// Y-Position according to the document resolution
        /// </summary>
        /// <value>Y-Position according to the document resolution</value>
        [DataMember(Name = "Y", EmitDefaultValue = false)]
        public int Y { get; set; }

        /// <summary>
        /// Width according to the document resolution
        /// </summary>
        /// <value>Width according to the document resolution</value>
        [DataMember(Name = "Width", EmitDefaultValue = false)]
        public int Width { get; set; }

        /// <summary>
        /// Height according to the document resolution
        /// </summary>
        /// <value>Height according to the document resolution</value>
        [DataMember(Name = "Height", EmitDefaultValue = false)]
        public int Height { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LineItemResponse {\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  PositionNumber: ").Append(PositionNumber).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  DeliveryId: ").Append(DeliveryId).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  Y: ").Append(Y).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LineItemResponse);
        }

        /// <summary>
        /// Returns true if LineItemResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of LineItemResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LineItemResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ItemId == input.ItemId ||
                    (this.ItemId != null &&
                    this.ItemId.Equals(input.ItemId))
                ) && 
                (
                    this.PositionNumber == input.PositionNumber ||
                    this.PositionNumber.Equals(input.PositionNumber)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.UnitPrice == input.UnitPrice ||
                    (this.UnitPrice != null &&
                    this.UnitPrice.Equals(input.UnitPrice))
                ) && 
                (
                    this.TotalAmount == input.TotalAmount ||
                    (this.TotalAmount != null &&
                    this.TotalAmount.Equals(input.TotalAmount))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.DeliveryId == input.DeliveryId ||
                    (this.DeliveryId != null &&
                    this.DeliveryId.Equals(input.DeliveryId))
                ) && 
                (
                    this.Score == input.Score ||
                    this.Score.Equals(input.Score)
                ) && 
                (
                    this.X == input.X ||
                    this.X.Equals(input.X)
                ) && 
                (
                    this.Y == input.Y ||
                    this.Y.Equals(input.Y)
                ) && 
                (
                    this.Width == input.Width ||
                    this.Width.Equals(input.Width)
                ) && 
                (
                    this.Height == input.Height ||
                    this.Height.Equals(input.Height)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ItemId != null)
                    hashCode = hashCode * 59 + this.ItemId.GetHashCode();
                hashCode = hashCode * 59 + this.PositionNumber.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.UnitPrice != null)
                    hashCode = hashCode * 59 + this.UnitPrice.GetHashCode();
                if (this.TotalAmount != null)
                    hashCode = hashCode * 59 + this.TotalAmount.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.DeliveryId != null)
                    hashCode = hashCode * 59 + this.DeliveryId.GetHashCode();
                hashCode = hashCode * 59 + this.Score.GetHashCode();
                hashCode = hashCode * 59 + this.X.GetHashCode();
                hashCode = hashCode * 59 + this.Y.GetHashCode();
                hashCode = hashCode * 59 + this.Width.GetHashCode();
                hashCode = hashCode * 59 + this.Height.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
