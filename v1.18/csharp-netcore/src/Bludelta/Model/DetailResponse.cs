/*
 * Blumatix.Capture.Webservice.Client.Selfhosted
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.9
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Bludelta.Client.OpenAPIDateConverter;

namespace Bludelta.Model
{
    /// <summary>
    /// DetailResponse
    /// </summary>
    [DataContract(Name = "DetailResponse")]
    public partial class DetailResponse : IEquatable<DetailResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DetailResponse" /> class.
        /// </summary>
        /// <param name="name">Name of the detail.</param>
        /// <param name="text">The content as raw text.</param>
        /// <param name="value">The content formatted as value.</param>
        /// <param name="score">Scored probability. Value between zero and one..</param>
        /// <param name="x">X-Position according to the document resolution.</param>
        /// <param name="y">Y-Position according to the document resolution.</param>
        /// <param name="width">Width according to the document resolution.</param>
        /// <param name="height">Height according to the document resolution.</param>
        public DetailResponse(string name = default(string), string text = default(string), string value = default(string), double score = default(double), int x = default(int), int y = default(int), int width = default(int), int height = default(int))
        {
            this.Name = name;
            this.Text = text;
            this.Value = value;
            this.Score = score;
            this.X = x;
            this.Y = y;
            this.Width = width;
            this.Height = height;
        }

        /// <summary>
        /// Name of the detail
        /// </summary>
        /// <value>Name of the detail</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The content as raw text
        /// </summary>
        /// <value>The content as raw text</value>
        [DataMember(Name = "Text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// The content formatted as value
        /// </summary>
        /// <value>The content formatted as value</value>
        [DataMember(Name = "Value", EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// Scored probability. Value between zero and one.
        /// </summary>
        /// <value>Scored probability. Value between zero and one.</value>
        [DataMember(Name = "Score", EmitDefaultValue = false)]
        public double Score { get; set; }

        /// <summary>
        /// X-Position according to the document resolution
        /// </summary>
        /// <value>X-Position according to the document resolution</value>
        [DataMember(Name = "X", EmitDefaultValue = false)]
        public int X { get; set; }

        /// <summary>
        /// Y-Position according to the document resolution
        /// </summary>
        /// <value>Y-Position according to the document resolution</value>
        [DataMember(Name = "Y", EmitDefaultValue = false)]
        public int Y { get; set; }

        /// <summary>
        /// Width according to the document resolution
        /// </summary>
        /// <value>Width according to the document resolution</value>
        [DataMember(Name = "Width", EmitDefaultValue = false)]
        public int Width { get; set; }

        /// <summary>
        /// Height according to the document resolution
        /// </summary>
        /// <value>Height according to the document resolution</value>
        [DataMember(Name = "Height", EmitDefaultValue = false)]
        public int Height { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DetailResponse {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  Y: ").Append(Y).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DetailResponse);
        }

        /// <summary>
        /// Returns true if DetailResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of DetailResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DetailResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Score == input.Score ||
                    this.Score.Equals(input.Score)
                ) && 
                (
                    this.X == input.X ||
                    this.X.Equals(input.X)
                ) && 
                (
                    this.Y == input.Y ||
                    this.Y.Equals(input.Y)
                ) && 
                (
                    this.Width == input.Width ||
                    this.Width.Equals(input.Width)
                ) && 
                (
                    this.Height == input.Height ||
                    this.Height.Equals(input.Height)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                hashCode = hashCode * 59 + this.Score.GetHashCode();
                hashCode = hashCode * 59 + this.X.GetHashCode();
                hashCode = hashCode * 59 + this.Y.GetHashCode();
                hashCode = hashCode * 59 + this.Width.GetHashCode();
                hashCode = hashCode * 59 + this.Height.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
