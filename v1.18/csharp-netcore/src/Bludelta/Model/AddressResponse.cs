/*
 * Blumatix.Capture.Webservice.Client.Selfhosted
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.9
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Bludelta.Client.OpenAPIDateConverter;

namespace Bludelta.Model
{
    /// <summary>
    /// AddressResponse
    /// </summary>
    [DataContract(Name = "AddressResponse")]
    public partial class AddressResponse : IEquatable<AddressResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressResponse" /> class.
        /// </summary>
        /// <param name="street">street.</param>
        /// <param name="zipCode">zipCode.</param>
        /// <param name="city">city.</param>
        /// <param name="country">country.</param>
        /// <param name="x">X-Position according to the document resolution.</param>
        /// <param name="y">Y-Position according to the document resolution.</param>
        /// <param name="width">Width according to the document resolution.</param>
        /// <param name="height">Height according to the document resolution.</param>
        public AddressResponse(DetailResponse street = default(DetailResponse), DetailResponse zipCode = default(DetailResponse), DetailResponse city = default(DetailResponse), DetailResponse country = default(DetailResponse), int x = default(int), int y = default(int), int width = default(int), int height = default(int))
        {
            this.Street = street;
            this.ZipCode = zipCode;
            this.City = city;
            this.Country = country;
            this.X = x;
            this.Y = y;
            this.Width = width;
            this.Height = height;
        }

        /// <summary>
        /// Gets or Sets Street
        /// </summary>
        [DataMember(Name = "Street", EmitDefaultValue = false)]
        public DetailResponse Street { get; set; }

        /// <summary>
        /// Gets or Sets ZipCode
        /// </summary>
        [DataMember(Name = "ZipCode", EmitDefaultValue = false)]
        public DetailResponse ZipCode { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name = "City", EmitDefaultValue = false)]
        public DetailResponse City { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "Country", EmitDefaultValue = false)]
        public DetailResponse Country { get; set; }

        /// <summary>
        /// X-Position according to the document resolution
        /// </summary>
        /// <value>X-Position according to the document resolution</value>
        [DataMember(Name = "X", EmitDefaultValue = false)]
        public int X { get; set; }

        /// <summary>
        /// Y-Position according to the document resolution
        /// </summary>
        /// <value>Y-Position according to the document resolution</value>
        [DataMember(Name = "Y", EmitDefaultValue = false)]
        public int Y { get; set; }

        /// <summary>
        /// Width according to the document resolution
        /// </summary>
        /// <value>Width according to the document resolution</value>
        [DataMember(Name = "Width", EmitDefaultValue = false)]
        public int Width { get; set; }

        /// <summary>
        /// Height according to the document resolution
        /// </summary>
        /// <value>Height according to the document resolution</value>
        [DataMember(Name = "Height", EmitDefaultValue = false)]
        public int Height { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddressResponse {\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  ZipCode: ").Append(ZipCode).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  Y: ").Append(Y).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddressResponse);
        }

        /// <summary>
        /// Returns true if AddressResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of AddressResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddressResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Street == input.Street ||
                    (this.Street != null &&
                    this.Street.Equals(input.Street))
                ) && 
                (
                    this.ZipCode == input.ZipCode ||
                    (this.ZipCode != null &&
                    this.ZipCode.Equals(input.ZipCode))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.X == input.X ||
                    this.X.Equals(input.X)
                ) && 
                (
                    this.Y == input.Y ||
                    this.Y.Equals(input.Y)
                ) && 
                (
                    this.Width == input.Width ||
                    this.Width.Equals(input.Width)
                ) && 
                (
                    this.Height == input.Height ||
                    this.Height.Equals(input.Height)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Street != null)
                    hashCode = hashCode * 59 + this.Street.GetHashCode();
                if (this.ZipCode != null)
                    hashCode = hashCode * 59 + this.ZipCode.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                hashCode = hashCode * 59 + this.X.GetHashCode();
                hashCode = hashCode * 59 + this.Y.GetHashCode();
                hashCode = hashCode * 59 + this.Width.GetHashCode();
                hashCode = hashCode * 59 + this.Height.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
