/*
 * Blumatix.Capture.Webservice.Client.Selfhosted
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.9
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Bludelta.Client.OpenAPIDateConverter;

namespace Bludelta.Model
{
    /// <summary>
    /// DetectionGroupResponse
    /// </summary>
    [DataContract(Name = "DetectionGroupResponse")]
    public partial class DetectionGroupResponse : IEquatable<DetectionGroupResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DetectionGroupResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DetectionGroupResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DetectionGroupResponse" /> class.
        /// </summary>
        /// <param name="type">Predicted invoice detail (required).</param>
        /// <param name="typeName">Predicted invoice detail (required).</param>
        /// <param name="invoiceDetailTypePredictions">List of Predictions - One for each predicted invoice detail..</param>
        public DetectionGroupResponse(long type = default(long), string typeName = default(string), List<DetectionResponse> invoiceDetailTypePredictions = default(List<DetectionResponse>))
        {
            this.Type = type;
            // to ensure "typeName" is required (not null)
            if (typeName == null) {
                throw new ArgumentNullException("typeName is a required property for DetectionGroupResponse and cannot be null");
            }
            this.TypeName = typeName;
            this.InvoiceDetailTypePredictions = invoiceDetailTypePredictions;
        }

        /// <summary>
        /// Predicted invoice detail
        /// </summary>
        /// <value>Predicted invoice detail</value>
        [DataMember(Name = "Type", IsRequired = true, EmitDefaultValue = false)]
        public long Type { get; set; }

        /// <summary>
        /// Predicted invoice detail
        /// </summary>
        /// <value>Predicted invoice detail</value>
        [DataMember(Name = "TypeName", IsRequired = true, EmitDefaultValue = false)]
        public string TypeName { get; set; }

        /// <summary>
        /// List of Predictions - One for each predicted invoice detail.
        /// </summary>
        /// <value>List of Predictions - One for each predicted invoice detail.</value>
        [DataMember(Name = "InvoiceDetailTypePredictions", EmitDefaultValue = false)]
        public List<DetectionResponse> InvoiceDetailTypePredictions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DetectionGroupResponse {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TypeName: ").Append(TypeName).Append("\n");
            sb.Append("  InvoiceDetailTypePredictions: ").Append(InvoiceDetailTypePredictions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DetectionGroupResponse);
        }

        /// <summary>
        /// Returns true if DetectionGroupResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of DetectionGroupResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DetectionGroupResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.TypeName == input.TypeName ||
                    (this.TypeName != null &&
                    this.TypeName.Equals(input.TypeName))
                ) && 
                (
                    this.InvoiceDetailTypePredictions == input.InvoiceDetailTypePredictions ||
                    this.InvoiceDetailTypePredictions != null &&
                    input.InvoiceDetailTypePredictions != null &&
                    this.InvoiceDetailTypePredictions.SequenceEqual(input.InvoiceDetailTypePredictions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.TypeName != null)
                    hashCode = hashCode * 59 + this.TypeName.GetHashCode();
                if (this.InvoiceDetailTypePredictions != null)
                    hashCode = hashCode * 59 + this.InvoiceDetailTypePredictions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
