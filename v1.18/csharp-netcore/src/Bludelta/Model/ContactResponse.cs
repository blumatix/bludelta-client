/*
 * Blumatix.Capture.Webservice.Client.Selfhosted
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.9
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Bludelta.Client.OpenAPIDateConverter;

namespace Bludelta.Model
{
    /// <summary>
    /// ContactResponse
    /// </summary>
    [DataContract(Name = "ContactResponse")]
    public partial class ContactResponse : IEquatable<ContactResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactResponse" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="address">address.</param>
        /// <param name="score">Scored probability. Value between zero and one..</param>
        /// <param name="websiteUrl">Website of the contact.</param>
        /// <param name="email">Email address of the contact.</param>
        /// <param name="phone">phone.</param>
        /// <param name="fax">fax.</param>
        public ContactResponse(DetailResponse name = default(DetailResponse), AddressResponse address = default(AddressResponse), double score = default(double), List<DetailResponse> websiteUrl = default(List<DetailResponse>), List<DetailResponse> email = default(List<DetailResponse>), DetailResponse phone = default(DetailResponse), DetailResponse fax = default(DetailResponse))
        {
            this.Name = name;
            this.Address = address;
            this.Score = score;
            this.WebsiteUrl = websiteUrl;
            this.Email = email;
            this.Phone = phone;
            this.Fax = fax;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public DetailResponse Name { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "Address", EmitDefaultValue = false)]
        public AddressResponse Address { get; set; }

        /// <summary>
        /// Scored probability. Value between zero and one.
        /// </summary>
        /// <value>Scored probability. Value between zero and one.</value>
        [DataMember(Name = "Score", EmitDefaultValue = false)]
        public double Score { get; set; }

        /// <summary>
        /// Website of the contact
        /// </summary>
        /// <value>Website of the contact</value>
        [DataMember(Name = "WebsiteUrl", EmitDefaultValue = false)]
        public List<DetailResponse> WebsiteUrl { get; set; }

        /// <summary>
        /// Email address of the contact
        /// </summary>
        /// <value>Email address of the contact</value>
        [DataMember(Name = "Email", EmitDefaultValue = false)]
        public List<DetailResponse> Email { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name = "Phone", EmitDefaultValue = false)]
        public DetailResponse Phone { get; set; }

        /// <summary>
        /// Gets or Sets Fax
        /// </summary>
        [DataMember(Name = "Fax", EmitDefaultValue = false)]
        public DetailResponse Fax { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContactResponse {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  WebsiteUrl: ").Append(WebsiteUrl).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContactResponse);
        }

        /// <summary>
        /// Returns true if ContactResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ContactResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContactResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Score == input.Score ||
                    this.Score.Equals(input.Score)
                ) && 
                (
                    this.WebsiteUrl == input.WebsiteUrl ||
                    this.WebsiteUrl != null &&
                    input.WebsiteUrl != null &&
                    this.WebsiteUrl.SequenceEqual(input.WebsiteUrl)
                ) && 
                (
                    this.Email == input.Email ||
                    this.Email != null &&
                    input.Email != null &&
                    this.Email.SequenceEqual(input.Email)
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.Fax == input.Fax ||
                    (this.Fax != null &&
                    this.Fax.Equals(input.Fax))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.WebsiteUrl != null)
                    hashCode = hashCode * 59 + this.WebsiteUrl.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.Fax != null)
                    hashCode = hashCode * 59 + this.Fax.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
