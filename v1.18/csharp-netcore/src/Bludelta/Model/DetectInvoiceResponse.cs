/*
 * Blumatix.Capture.Webservice.Client.Selfhosted
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.9
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Bludelta.Client.OpenAPIDateConverter;

namespace Bludelta.Model
{
    /// <summary>
    /// DetectInvoiceResponse
    /// </summary>
    [DataContract(Name = "DetectInvoiceResponse")]
    public partial class DetectInvoiceResponse : IEquatable<DetectInvoiceResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DetectInvoiceResponse" /> class.
        /// </summary>
        /// <param name="documentResolution">Resolution of the original document in dpi..</param>
        /// <param name="documentFormat">The format of the document. It is either Letter or Receipt.</param>
        /// <param name="language">The detected language of the provided invoice document.</param>
        /// <param name="countries">The detected countires of the provided invoice document.</param>
        /// <param name="invoiceDetailTypePredictions">List of Predictions - One for each predicted invoice detail..</param>
        /// <param name="predictionGroups">List of PredictionGroups - One for each predicted invoice detail&lt;br&gt;e.g. VatGroup, containing predictions for Vat Rate, Net Amount and Vat Amount.</param>
        /// <param name="lineItemTable">lineItemTable.</param>
        /// <param name="sender">sender.</param>
        /// <param name="receiver">receiver.</param>
        /// <param name="contacts">A list containing all contacts that were found on the document - this includes Sender and Receiver.</param>
        /// <param name="formattedResult">Special invoice format. (for future use only).</param>
        /// <param name="isQualityOk">Invoice quality flag. (for future use only).</param>
        /// <param name="ocrWordQuality">Measures ratio of word certainty (certainty vs. uncertainty). The higher the value the better.</param>
        /// <param name="meanCharacterConfidenceValue">Mean character confidence value. 0 is very confident 100 is very un-confident.</param>
        /// <param name="stdDevCharacterConfidenceValue">Standard deviation of character confidence value..</param>
        /// <param name="maxCharacterConfidenceValue">Max character confidence value. 0 is very confident 100 is very incofident.</param>
        /// <param name="ocrResult">OCR-result as json string.</param>
        /// <param name="resultPdf">Result pdf-document with marked predictions. (encoded as base64 string).</param>
        /// <param name="ocrPageImages">List of OCR-page images (encoded as base64 string)..</param>
        /// <param name="documentText">Plain text of the document as detected by the OCR..</param>
        /// <param name="invoiceState">Describes the state of the processed invoice. 0 &#x3D; Ok.</param>
        /// <param name="confidence">Describes the confidence that the invoice can be auto-processed without human validation. (-1 &#x3D; unknown, 0 &#x3D; validate manually, 1 &#x3D; autoprocess).</param>
        public DetectInvoiceResponse(int documentResolution = default(int), string documentFormat = default(string), string language = default(string), string countries = default(string), List<DetectionResponse> invoiceDetailTypePredictions = default(List<DetectionResponse>), List<DetectionGroupResponse> predictionGroups = default(List<DetectionGroupResponse>), LineItemTableResponse lineItemTable = default(LineItemTableResponse), ContactResponse sender = default(ContactResponse), ContactResponse receiver = default(ContactResponse), List<ContactResponse> contacts = default(List<ContactResponse>), string formattedResult = default(string), bool isQualityOk = default(bool), float ocrWordQuality = default(float), float meanCharacterConfidenceValue = default(float), float stdDevCharacterConfidenceValue = default(float), int maxCharacterConfidenceValue = default(int), string ocrResult = default(string), string resultPdf = default(string), List<string> ocrPageImages = default(List<string>), string documentText = default(string), int invoiceState = default(int), float confidence = default(float))
        {
            this.DocumentResolution = documentResolution;
            this.DocumentFormat = documentFormat;
            this.Language = language;
            this.Countries = countries;
            this.InvoiceDetailTypePredictions = invoiceDetailTypePredictions;
            this.PredictionGroups = predictionGroups;
            this.LineItemTable = lineItemTable;
            this.Sender = sender;
            this.Receiver = receiver;
            this.Contacts = contacts;
            this.FormattedResult = formattedResult;
            this.IsQualityOk = isQualityOk;
            this.OcrWordQuality = ocrWordQuality;
            this.MeanCharacterConfidenceValue = meanCharacterConfidenceValue;
            this.StdDevCharacterConfidenceValue = stdDevCharacterConfidenceValue;
            this.MaxCharacterConfidenceValue = maxCharacterConfidenceValue;
            this.OcrResult = ocrResult;
            this.ResultPdf = resultPdf;
            this.OcrPageImages = ocrPageImages;
            this.DocumentText = documentText;
            this.InvoiceState = invoiceState;
            this.Confidence = confidence;
        }

        /// <summary>
        /// Resolution of the original document in dpi.
        /// </summary>
        /// <value>Resolution of the original document in dpi.</value>
        [DataMember(Name = "DocumentResolution", EmitDefaultValue = false)]
        public int DocumentResolution { get; set; }

        /// <summary>
        /// The format of the document. It is either Letter or Receipt
        /// </summary>
        /// <value>The format of the document. It is either Letter or Receipt</value>
        [DataMember(Name = "DocumentFormat", EmitDefaultValue = false)]
        public string DocumentFormat { get; set; }

        /// <summary>
        /// The detected language of the provided invoice document
        /// </summary>
        /// <value>The detected language of the provided invoice document</value>
        [DataMember(Name = "Language", EmitDefaultValue = false)]
        public string Language { get; set; }

        /// <summary>
        /// The detected countires of the provided invoice document
        /// </summary>
        /// <value>The detected countires of the provided invoice document</value>
        [DataMember(Name = "Countries", EmitDefaultValue = false)]
        public string Countries { get; set; }

        /// <summary>
        /// List of Predictions - One for each predicted invoice detail.
        /// </summary>
        /// <value>List of Predictions - One for each predicted invoice detail.</value>
        [DataMember(Name = "InvoiceDetailTypePredictions", EmitDefaultValue = false)]
        public List<DetectionResponse> InvoiceDetailTypePredictions { get; set; }

        /// <summary>
        /// List of PredictionGroups - One for each predicted invoice detail&lt;br&gt;e.g. VatGroup, containing predictions for Vat Rate, Net Amount and Vat Amount
        /// </summary>
        /// <value>List of PredictionGroups - One for each predicted invoice detail&lt;br&gt;e.g. VatGroup, containing predictions for Vat Rate, Net Amount and Vat Amount</value>
        [DataMember(Name = "PredictionGroups", EmitDefaultValue = false)]
        public List<DetectionGroupResponse> PredictionGroups { get; set; }

        /// <summary>
        /// Gets or Sets LineItemTable
        /// </summary>
        [DataMember(Name = "LineItemTable", EmitDefaultValue = false)]
        public LineItemTableResponse LineItemTable { get; set; }

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [DataMember(Name = "Sender", EmitDefaultValue = false)]
        public ContactResponse Sender { get; set; }

        /// <summary>
        /// Gets or Sets Receiver
        /// </summary>
        [DataMember(Name = "Receiver", EmitDefaultValue = false)]
        public ContactResponse Receiver { get; set; }

        /// <summary>
        /// A list containing all contacts that were found on the document - this includes Sender and Receiver
        /// </summary>
        /// <value>A list containing all contacts that were found on the document - this includes Sender and Receiver</value>
        [DataMember(Name = "Contacts", EmitDefaultValue = false)]
        public List<ContactResponse> Contacts { get; set; }

        /// <summary>
        /// Special invoice format. (for future use only)
        /// </summary>
        /// <value>Special invoice format. (for future use only)</value>
        [DataMember(Name = "FormattedResult", EmitDefaultValue = false)]
        public string FormattedResult { get; set; }

        /// <summary>
        /// Invoice quality flag. (for future use only)
        /// </summary>
        /// <value>Invoice quality flag. (for future use only)</value>
        [DataMember(Name = "IsQualityOk", EmitDefaultValue = true)]
        public bool IsQualityOk { get; set; }

        /// <summary>
        /// Measures ratio of word certainty (certainty vs. uncertainty). The higher the value the better
        /// </summary>
        /// <value>Measures ratio of word certainty (certainty vs. uncertainty). The higher the value the better</value>
        [DataMember(Name = "OcrWordQuality", EmitDefaultValue = false)]
        public float OcrWordQuality { get; set; }

        /// <summary>
        /// Mean character confidence value. 0 is very confident 100 is very un-confident
        /// </summary>
        /// <value>Mean character confidence value. 0 is very confident 100 is very un-confident</value>
        [DataMember(Name = "MeanCharacterConfidenceValue", EmitDefaultValue = false)]
        public float MeanCharacterConfidenceValue { get; set; }

        /// <summary>
        /// Standard deviation of character confidence value.
        /// </summary>
        /// <value>Standard deviation of character confidence value.</value>
        [DataMember(Name = "StdDevCharacterConfidenceValue", EmitDefaultValue = false)]
        public float StdDevCharacterConfidenceValue { get; set; }

        /// <summary>
        /// Max character confidence value. 0 is very confident 100 is very incofident
        /// </summary>
        /// <value>Max character confidence value. 0 is very confident 100 is very incofident</value>
        [DataMember(Name = "MaxCharacterConfidenceValue", EmitDefaultValue = false)]
        public int MaxCharacterConfidenceValue { get; set; }

        /// <summary>
        /// OCR-result as json string
        /// </summary>
        /// <value>OCR-result as json string</value>
        [DataMember(Name = "OcrResult", EmitDefaultValue = false)]
        public string OcrResult { get; set; }

        /// <summary>
        /// Result pdf-document with marked predictions. (encoded as base64 string)
        /// </summary>
        /// <value>Result pdf-document with marked predictions. (encoded as base64 string)</value>
        [DataMember(Name = "ResultPdf", EmitDefaultValue = false)]
        public string ResultPdf { get; set; }

        /// <summary>
        /// List of OCR-page images (encoded as base64 string).
        /// </summary>
        /// <value>List of OCR-page images (encoded as base64 string).</value>
        [DataMember(Name = "OcrPageImages", EmitDefaultValue = false)]
        public List<string> OcrPageImages { get; set; }

        /// <summary>
        /// Plain text of the document as detected by the OCR.
        /// </summary>
        /// <value>Plain text of the document as detected by the OCR.</value>
        [DataMember(Name = "DocumentText", EmitDefaultValue = false)]
        public string DocumentText { get; set; }

        /// <summary>
        /// Describes the state of the processed invoice. 0 &#x3D; Ok
        /// </summary>
        /// <value>Describes the state of the processed invoice. 0 &#x3D; Ok</value>
        [DataMember(Name = "InvoiceState", EmitDefaultValue = false)]
        public int InvoiceState { get; set; }

        /// <summary>
        /// Describes the confidence that the invoice can be auto-processed without human validation. (-1 &#x3D; unknown, 0 &#x3D; validate manually, 1 &#x3D; autoprocess)
        /// </summary>
        /// <value>Describes the confidence that the invoice can be auto-processed without human validation. (-1 &#x3D; unknown, 0 &#x3D; validate manually, 1 &#x3D; autoprocess)</value>
        [DataMember(Name = "Confidence", EmitDefaultValue = false)]
        public float Confidence { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DetectInvoiceResponse {\n");
            sb.Append("  DocumentResolution: ").Append(DocumentResolution).Append("\n");
            sb.Append("  DocumentFormat: ").Append(DocumentFormat).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Countries: ").Append(Countries).Append("\n");
            sb.Append("  InvoiceDetailTypePredictions: ").Append(InvoiceDetailTypePredictions).Append("\n");
            sb.Append("  PredictionGroups: ").Append(PredictionGroups).Append("\n");
            sb.Append("  LineItemTable: ").Append(LineItemTable).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  Receiver: ").Append(Receiver).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  FormattedResult: ").Append(FormattedResult).Append("\n");
            sb.Append("  IsQualityOk: ").Append(IsQualityOk).Append("\n");
            sb.Append("  OcrWordQuality: ").Append(OcrWordQuality).Append("\n");
            sb.Append("  MeanCharacterConfidenceValue: ").Append(MeanCharacterConfidenceValue).Append("\n");
            sb.Append("  StdDevCharacterConfidenceValue: ").Append(StdDevCharacterConfidenceValue).Append("\n");
            sb.Append("  MaxCharacterConfidenceValue: ").Append(MaxCharacterConfidenceValue).Append("\n");
            sb.Append("  OcrResult: ").Append(OcrResult).Append("\n");
            sb.Append("  ResultPdf: ").Append(ResultPdf).Append("\n");
            sb.Append("  OcrPageImages: ").Append(OcrPageImages).Append("\n");
            sb.Append("  DocumentText: ").Append(DocumentText).Append("\n");
            sb.Append("  InvoiceState: ").Append(InvoiceState).Append("\n");
            sb.Append("  Confidence: ").Append(Confidence).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DetectInvoiceResponse);
        }

        /// <summary>
        /// Returns true if DetectInvoiceResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of DetectInvoiceResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DetectInvoiceResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DocumentResolution == input.DocumentResolution ||
                    this.DocumentResolution.Equals(input.DocumentResolution)
                ) && 
                (
                    this.DocumentFormat == input.DocumentFormat ||
                    (this.DocumentFormat != null &&
                    this.DocumentFormat.Equals(input.DocumentFormat))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.Countries == input.Countries ||
                    (this.Countries != null &&
                    this.Countries.Equals(input.Countries))
                ) && 
                (
                    this.InvoiceDetailTypePredictions == input.InvoiceDetailTypePredictions ||
                    this.InvoiceDetailTypePredictions != null &&
                    input.InvoiceDetailTypePredictions != null &&
                    this.InvoiceDetailTypePredictions.SequenceEqual(input.InvoiceDetailTypePredictions)
                ) && 
                (
                    this.PredictionGroups == input.PredictionGroups ||
                    this.PredictionGroups != null &&
                    input.PredictionGroups != null &&
                    this.PredictionGroups.SequenceEqual(input.PredictionGroups)
                ) && 
                (
                    this.LineItemTable == input.LineItemTable ||
                    (this.LineItemTable != null &&
                    this.LineItemTable.Equals(input.LineItemTable))
                ) && 
                (
                    this.Sender == input.Sender ||
                    (this.Sender != null &&
                    this.Sender.Equals(input.Sender))
                ) && 
                (
                    this.Receiver == input.Receiver ||
                    (this.Receiver != null &&
                    this.Receiver.Equals(input.Receiver))
                ) && 
                (
                    this.Contacts == input.Contacts ||
                    this.Contacts != null &&
                    input.Contacts != null &&
                    this.Contacts.SequenceEqual(input.Contacts)
                ) && 
                (
                    this.FormattedResult == input.FormattedResult ||
                    (this.FormattedResult != null &&
                    this.FormattedResult.Equals(input.FormattedResult))
                ) && 
                (
                    this.IsQualityOk == input.IsQualityOk ||
                    this.IsQualityOk.Equals(input.IsQualityOk)
                ) && 
                (
                    this.OcrWordQuality == input.OcrWordQuality ||
                    this.OcrWordQuality.Equals(input.OcrWordQuality)
                ) && 
                (
                    this.MeanCharacterConfidenceValue == input.MeanCharacterConfidenceValue ||
                    this.MeanCharacterConfidenceValue.Equals(input.MeanCharacterConfidenceValue)
                ) && 
                (
                    this.StdDevCharacterConfidenceValue == input.StdDevCharacterConfidenceValue ||
                    this.StdDevCharacterConfidenceValue.Equals(input.StdDevCharacterConfidenceValue)
                ) && 
                (
                    this.MaxCharacterConfidenceValue == input.MaxCharacterConfidenceValue ||
                    this.MaxCharacterConfidenceValue.Equals(input.MaxCharacterConfidenceValue)
                ) && 
                (
                    this.OcrResult == input.OcrResult ||
                    (this.OcrResult != null &&
                    this.OcrResult.Equals(input.OcrResult))
                ) && 
                (
                    this.ResultPdf == input.ResultPdf ||
                    (this.ResultPdf != null &&
                    this.ResultPdf.Equals(input.ResultPdf))
                ) && 
                (
                    this.OcrPageImages == input.OcrPageImages ||
                    this.OcrPageImages != null &&
                    input.OcrPageImages != null &&
                    this.OcrPageImages.SequenceEqual(input.OcrPageImages)
                ) && 
                (
                    this.DocumentText == input.DocumentText ||
                    (this.DocumentText != null &&
                    this.DocumentText.Equals(input.DocumentText))
                ) && 
                (
                    this.InvoiceState == input.InvoiceState ||
                    this.InvoiceState.Equals(input.InvoiceState)
                ) && 
                (
                    this.Confidence == input.Confidence ||
                    this.Confidence.Equals(input.Confidence)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.DocumentResolution.GetHashCode();
                if (this.DocumentFormat != null)
                    hashCode = hashCode * 59 + this.DocumentFormat.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.Countries != null)
                    hashCode = hashCode * 59 + this.Countries.GetHashCode();
                if (this.InvoiceDetailTypePredictions != null)
                    hashCode = hashCode * 59 + this.InvoiceDetailTypePredictions.GetHashCode();
                if (this.PredictionGroups != null)
                    hashCode = hashCode * 59 + this.PredictionGroups.GetHashCode();
                if (this.LineItemTable != null)
                    hashCode = hashCode * 59 + this.LineItemTable.GetHashCode();
                if (this.Sender != null)
                    hashCode = hashCode * 59 + this.Sender.GetHashCode();
                if (this.Receiver != null)
                    hashCode = hashCode * 59 + this.Receiver.GetHashCode();
                if (this.Contacts != null)
                    hashCode = hashCode * 59 + this.Contacts.GetHashCode();
                if (this.FormattedResult != null)
                    hashCode = hashCode * 59 + this.FormattedResult.GetHashCode();
                hashCode = hashCode * 59 + this.IsQualityOk.GetHashCode();
                hashCode = hashCode * 59 + this.OcrWordQuality.GetHashCode();
                hashCode = hashCode * 59 + this.MeanCharacterConfidenceValue.GetHashCode();
                hashCode = hashCode * 59 + this.StdDevCharacterConfidenceValue.GetHashCode();
                hashCode = hashCode * 59 + this.MaxCharacterConfidenceValue.GetHashCode();
                if (this.OcrResult != null)
                    hashCode = hashCode * 59 + this.OcrResult.GetHashCode();
                if (this.ResultPdf != null)
                    hashCode = hashCode * 59 + this.ResultPdf.GetHashCode();
                if (this.OcrPageImages != null)
                    hashCode = hashCode * 59 + this.OcrPageImages.GetHashCode();
                if (this.DocumentText != null)
                    hashCode = hashCode * 59 + this.DocumentText.GetHashCode();
                hashCode = hashCode * 59 + this.InvoiceState.GetHashCode();
                hashCode = hashCode * 59 + this.Confidence.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
